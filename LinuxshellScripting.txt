simple prining statements 
one.sh
#! /bin/bash

echo "welcome to aws and devops training-----"
echo "hello world---"
ls -ll
cmod +x one.sh
./one/sh
------------------------------
one.sh (Local variables)

ename= "venu"
eid=123
echo= "Employee ID :$eid"
echo= "Employee Name :$ename"
./one.sh
-------------------------------------------

one.sh (working with global variables)

echo our shell name is $BASH
echo our shell version name is $BASH_VERSION
echo our home directory is $HOME
echo our current working directory is $PWD
./one.sh 
----------------------------------------------
file name two.sh  (using emp details by using LS )
chmod +x two.sh

#! /bin/bash

echo "Enter Employee ID :"
read eid 
echo "Enter Employee Name :"
read ename
echo "Enter Employee Designation :"
read edesig

echo "welcome ,$ename"

./two.sh

---------------------
  file name two.sh (at a single line)
chmod +x two.sh

#! /bin/bash

echo -e "Enter Employee ID : \c"
read eid 
echo -e "Enter Employee Name : \c"
read ename
echo -e "Enter Employee Designation : c\"
read edesig

echo "welcome ,$ename"

./two.sh
---------------------------------------------
#! /bin/bash   (./two.sh)---how to sensitive data using LS

read -p ' Enter UserName : ' uname

read -sp ' Enter Password : 'pword
echo

echo "UserName : $uname Password : $ pword"
-----------------------------------------------------
#! /bin/bash   (./two.sh)-----how to read and print multiple values

echo " Enter Names : "

read -a names 

echo " Name : ${names[0]} ${names[1]} ${names[2]}"
---------------------------------------------------------
#! /bin/bash 

echo "ENter name : " 
read
echo "Name : $REPLY"
-------------------------
PASS Arguments to a bash script

#! /bin/bash 

#echo "Enter Name : "

#read -a args

echo "Format-1 :"
echo $0 $1 $2 $3

args=("$@")

echo "Format-2 :"

echo ${names[0]} ${names[1]} ${names[2]}"

echo $@ #prints arguments
echo $@ #prints number of arguments

./two.sh james 1234 jack 125
-----------------------------------------
Basic arithmetic expr

#! /bin/bash [one.sh]
x=10
y=20

echo "Addition of $x & $y is"
echo $(( $x + $y ))

echo "Sub of $x & $y is"
echo $(( $x - $y ))

echo "Mul of $x & $y is"
echo $(( $x * $y ))

echo "Div of $x & $y is"
echo $(( $x / $y ))


echo "Mod of $x & $y is"(modular division)
echo $(( $x % $y ))


echo "Exponentiation of x,y"
echo $(( $x ** $y ))

./one.sh
-----------------------
#! /bin/bash [one.sh]
x=10
y=20
z=0
echo "Addition"
let "z = $(( x + y ))"
echo "z= $z"

echo "substraction"
let "z = $(( x - y ))"
echo "z= $z"

echo "Multipliction"
let "z = $(( x * y ))"
echo "z= $z"

echo "Division"
let "z = $(( x / y ))"
echo "z= $z"
./one.sh
--------------------------------
#! /bin/bash [one.sh]

x=10
y=20

val='expr $x + $y'
echo "a + b : $val"
echo $val
---------------------------------
Conditionalstatements-1

These statements are used to change the flow of execution when a provided condition is True or False

usin if statement
1. if a condition provided is true ,it will do a certain set of action if false another set of action

using if-else statement
2. if a condition provided is true, it will enter the staments after than if false, then statements inside else will be executed

using Else if statement

3. if condiion1 is True, statee inside its then will execute

if condition is False , then condion2 is checked
* if True ,statements inside it will be executed.
* if False, the Statements inside else will execute.

4.using Nested if statement

a. if condition1 is True, statements inside its then will execute
b. if condition1 is False, then it goes inside else.Now it check the condition2
c. if condition2 is True, statements inside inside the second if statement is executed.
d. if condition2 is False, statements inside inside the second else executes.

if statement: if block condition1 is True the  its then will execute other wise  if block skipped

-------------------------------------------------------------------------
integer comparision

-eq -is equal to if ["$a" -eq "$b"]
-ne -is not equal to -if ["$a" -ne "$b"]
-ge -is greater than -if ["$a" -gt "$b"]
-ge -is greater than -if ["$a" -ge "$b"]
-lt -is less than -if ["$a" -lt "$b"]
-le -is less than equal -if ["$a" -le "$b"]

< -is less than -if (("$a" < "$b"))
<= -is -is greater than -if (("$a" < "$b")) than -if (("$a" < "$b"))

> = is greater than (("$a" > "$b"))
> = is is greater than (("$a" >= "$b"))

-----------------------------------------------------------------------
#! /bin/bash

num1=10
num2=15

if (($num1>$num2))
then
echo "$num1 is greater than $num2"
fi

echo "End of block."

-------------------------------------------------------

if-else statements : 

if the given condition is True then if block statements is execuated

if the given condition is fals else block stament i s excuated
---------------------

if [condition]

then

statements 

else
 
statements 

fi






-----------------
bock1.sh

#! /bin/bash

num1=10
num2=15

if (($num1>$num2))
then
echo "In if block."
echo "$num1 is greater than $num2

else
echo "In else block."
echo "$num2 is greater than $num1

fi

echo "End of -else block."
---------------------------------------------

dynamically

#! /bin/bash(block.sh)

read -p "Enter Number1 : " num1
read -p "Enter Number2 : " num2

if (($num1>$num2))
then
echo "$num1 is greater than $num2

else
echo "In else block."
echo "$num2 is greater than $num1

fi

echo "End of -else block."
-------------------------------------------
if- else
----------
if [condition1]

then
  
statements 

elif [condition2]

then

statements 

else
 
statements

fi

-----------
#! /bin/bash[block2.sh]

echo -e Enter Average : \c"
read avg

if (( $avg > 75 ))
then
     echo "Distinction"
elif (( $avg > 60 ))
then
    echo "First Division."
elif (( $avg > 50 ))
then
    echo "second Division."
else 
      echo "Third Division."
fi
-------------

using Nested if statement
----

if [condition1]

then 

  statements

else
 
then
  
if [condition2]

 statements

else
   
   then
   
     statements

fi

-----------------------------------------------------

#! /bin/bash(block.sh)

read -p "Enter Number1 : " num1
read -p "Enter Number2 : " num2
read -p "Enter Number3 : " num3

if (($num1>$num2))
then
if (($num1>$num3))
then
 echo "In nested if block."
 echo "$num1 is greater than $num2 and $num3"
else
echo "In nested if block." 
echo "$num1 is greater than $num2 and  less than $num3"
 fi
else
 echo "$num1 is less than $num2 "

fi

echo "End of -else block."

----------------------------------------------------

controle statements-examples
----------
































